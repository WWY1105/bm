var basicUrl = "https://shop.sharejoy.cn";//ajax首页
var indexUrl = "https://shop.sharejoy.cn";//登录界面即主页
var authed = {1001: "未认证", 1002: "已认证", 1003: "认证审核中", 1004: "关闭审核中", 1005: "关闭"};
var textCheckJson = {
    name: /^[a-zA-z]{1}[a-zA-Z0-9]{5,15}$/,
    password: /^[\w]{8,20}$/,
    telephone: /^0[1-9]{2,3}-?[2-9][0-9]{6,7}(-?[0-9]{1,4})?|1[0-9]{10}$/,
    phone: /^1\d{10}$/,
    tel: /^[1-9]{2,3}-?[2-9][0-9]{6,7}(-?[0-9]{1,4})?$/,
    nickname: /^[\u4e00-\u9fa5\w\S]{2,20}$/,
    dictCode: /^[0-9]{2,10}$/,
    dictText: /^[\u4e00-\u9fa5\w]{1,20}$/,
    dictName: /^[\u4e00-\u9fa5]{2,10}$/,
    dictMnemonic: /^[a-zA-Z_]{2,20}$/,
    shopcode: /^[a-zA-Z0-9]{1,20}$/,
    "float-regex": /^\-?\d+((\.|\,)\d+)?$/
};
var textCheckErrorJson = {
    name: "必须以字母开头，不得含有汉字及其他符号",
    password: "不能含有空格",
    telephone: "请输入正确电话号码",
    phone: "请输入正确电话号码",
    tel: "请输入正确电话号码",
    nickname: "不能含有空格及特殊字符",
    dictCode: "只能为数字",
    dictText: "只能为汉字",
    dictName: "只能为汉字",
    dictMnemonic: "只能输入下划线及英文",
    shopcode: "只能输入英文及数字"
};
var constUrlDict = {
    "staffs-base": "/staffs",
    login: "/staffs/login",
    logout: "/staffs/logout",
    staff: "/staffs/staff",
    "staffs-shop": "/staffs/shop",
    "staffs-keeper": "/staffs/keeper",
    "staffs-password": "/staffs/password",
    customer: "/customer",
    memberGrade: "/memberGrade",
    benefit: "/benefit",
    coupon: "/coupon",
    tables: "/tables",
    "tables-batch": "/tables/batch",
    "tables-box": "/tables/box",
    "tables-table": "/tables/table",
    "tables-shop": "/tables/shop",
    businesstimes: "/businesstimes",
    businesstime: "/businesstimes/businesstime",
    activity: "/activity"
};
var obtainRepeatCategory = [{id: "AFTER_CHECK", name: "核销后可重领"}, {id: "UNLIMITED", name: "无限制"}];
var dateRangeCategory = [{type: "PERMANENT", name: "永久有效"}, {type: "CONTINUOUS", name: "连续有效"}, {
    type: "SELECTED_DATES",
    name: "手动选择"
}, {type: "MONTH_EFFECTIVE", name: "当月有效"}, {type: "EXCLUDE_MONTH_DAYS", name: "按月排除"}, {
    type: "EXCLUDE_WEEKLY_DAY",
    name: "按周排除"
}, {type: "AROUND_FIX_DATE", name: "生日"}, {type: "INCLUDE_WEEKLY_DAY", name: "按周指定"}, {
    type: "INCLUDE_MONTH_DAYS",
    name: "按月指定"
}];
var couponRangeCategory = {CONTINUOUS: "连续有效", AUTOMATIC_DAY_DELAY: "延期生效", AUTOMATIC_MONTH_DELAY: "月底有效"};
var ruleCategory = [{id: "DISCOUNT", name: "打折"}, {id: "SPECIAL_PRICE", name: "特价"}, {
    id: "COUPON",
    name: "消费返券"
}, {id: "COUPONFREE", name: "送券"}, {id: "POINT", name: "积分"}, {id: "POINTCONSUME", name: "积分抵现"}, {
    id: "CHARGE",
    name: "储值卡"
}, {id: "CHARGECONSUME", name: "使用充值卡"}];
// 卡同享活动
var cardRuleCategory = [
    {id: "EXCHANGE", name: "积分兑换"},
    {id: "DISCOUNT", name: "打折"},
    {id: "COUPON", name: "消费返券"},
    {id: "POINT", name: "消费积分"},
    {id: "CHARGECONSUME", name: "使用充值卡"},
    {id: "MEMBERPRICE", name: "会员价"}
];
var allRuleCategory = {
    DISCOUNT: "打折",
    SPECIAL_PRICE: "特价",
    COUPON: "消费返券",
    COUPON_CONSUME: "消费用券",
    COUPONFREE: "送券",
    POINT: "积分",
    POINTCONSUME: "积分抵现",
    CHARGE: "储值卡",
    CHARGECONSUME: "使用充值卡",
    WELFARE: "福利"
};
var sharedActivitys = {
    DISCOUNT: ["POINT", "COUPON", "CHARGECONSUME"],
    SPECIAL_PRICE: ["DISCOUNT", "POINT", "COUPON", "CHARGECONSUME"],
    COUPON_CONSUME: ["COUPON", "POINT", "CHARGECONSUME"],
    POINTCONSUME: ["COUPON", "POINT", "CHARGECONSUME"],
    COUPON: ["POINT"],
    POINT: ["COUPON"],
    CHARGECONSUME: ["POINT", "COUPON"],
    MEMBERPRICE: ["COUPON", "POINT", "CHARGECONSUME", "DISCOUNT", "POINTCONSUME", "LIMITREDUCE", "SPENDAS", "SPECIALPRICE", "SETMEAL"]
};
var shopTypeJson = {1003: "加盟店", 1001: "连锁店", 1002: "自营店"};
function ajaxSendFn(j, u, h, l) {
    var redata;
    var api_key = "5d85a0398cb74c66a46affbb98efaf41";
    if (!$.cookie("apikey")) {
        $.cookie("apikey", api_key, {expire: 30, path: "/"})
    }
    if (h == "PUT" || h == "DELETE" || h == "POST") {
        j = typeof j == "string" ? j : JSON.stringify(j);
        $.ajax({
            url: basicUrl + u + "?" + sortUrl(),
            data: j,
            type: h,
            dataType: "json",
            async: false,
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Content-Type", "application/json")
            },
            success: function (data) {
                if (l != 2) {
                    if (data.code == 4140 || data.code == 403e3)location.href = indexUrl
                }
                if (data.code != 200) {
                    console.log(data.message)
                }
                redata = data
            }
        })
    } else {
        $.ajax({
            url: basicUrl + u,
            data: objSort(j),
            type: h,
            dataType: "json",
            async: false,
            beforeSend: function (xhr) {
                if (l == 1) {
                    xhr.setRequestHeader("Content-Type", "application/json")
                }
            },
            success: function (data) {
                if (l != 2) {
                    if (data.code == 4140 || data.code == 403e3)location.href = indexUrl
                }
                if (data.code != 200) {
                    console.log(data.message)
                }
                redata = data
            },
            loading: function () {
            }
        })
    }
    return redata
}
function ajaxSendFn2(j, u, h, l) {
    var redata;
    var api_key = "5d85a0398cb74c66a46affbb98efaf41";
    $.cookie("apikey", api_key, {expire: 30, path: "/"});
    $.ajax({
        url: basicUrl + u, data: objSort(j), type: h, dataType: "json", beforeSend: function (xhr) {
            if (l == 1) {
                xhr.setRequestHeader("Content-Type", "application/json")
            }
        }, success: function (data) {
            if (l != 2) {
                if (data.code == 403e3)location.href = indexUrl
            }
            redata = data
        }, loading: function () {
        }
    });
    return redata
}
function arrRemoveNullFN(a) {
    var b = [];
    $.each(a, function (i, v) {
        if (v != "" && v != null && v)b.push(v)
    });
    return b
}
function arrToObj(a, b, c) {
    var tem = {};
    for (i = 0, j = a.length; i < j; i++) {
        if (!c)tem[a[i][b]] = a[i]; else tem[a[i][b]] = a[i][c]
    }
    return tem
}
function obj2Array(a, b) {
    var tem = [];
    for (var x in a) {
        if (b)tem.push(a[x][b]); else tem.push(a[x])
    }
    return tem
}
function in_array(stringToSearch, arrayToSearch) {
    for (s = 0; s < arrayToSearch.length; s++) {
        thisEntry = arrayToSearch[s].toString();
        if (thisEntry == stringToSearch)return true
    }
    return false
}
function concatUrl(base, url) {
    if (url !== "") {
        return base + "/" + url
    } else {
        return base
    }
}
var mergeParam = function (param) {
    var arr = [];
    angular.forEach(param, function (value, key) {
        arr.push(key + "=" + value)
    });
    return arr.join("&")
};
var parseDate = function (date) {
    if (date) {
        var tmp;
        if (typeof date === "string") {
            tmp = new Date;
            var ms = Date.parse(date);
            tmp.setTime(ms)
        } else {
            tmp = date
        }
        return tmp
    }
};
function unique(array) {
    var r = [];
    for (var i = 0, l = array.length; i < l; i++) {
        for (var j = i + 1; j < l; j++)if (array[i] === array[j])j = ++i;
        r.push(array[i])
    }
    return r
}
function errorMsg(result) {
    if (result) {
        alert(result.message)
    }
}
function query(url, param, cb) {
    $http({method: "GET", url: url, params: objSort(param)}).then(function (data) {
        cb(data.data)
    }, function (data) {
        alert(data.message)
    })
}
var app = angular.module("app", ["ngRoute", "720kb.tooltips", "ngMessages", "angular-loading-bar", "ngAnimate", "ui.bootstrap"]);
app.run(function ($rootScope, $location, $interval, $filter, $http) {
    $rootScope.cache = {};
    $rootScope.config = {
        time: new Date,
        shopname: $.cookie("shopname") + "管理系统",
        breadset: {},
        slide: "",
        modalcontent: "",
        textCheckJson: textCheckJson,
        textCheckErrorJson: textCheckErrorJson
    };
    $rootScope.config.staff = ajaxSendFn({}, constUrlDict["staff"], "GET", 1).result;
    $interval(function () {
        $rootScope.config.time = new Date
    }, 1e3);
    $rootScope.urlFn = function () {
        if (!$location.$$path) {
            $rootScope.active = "shops";
            return
        }
        localurl = $location.$$path.split("/");
        if (localurl[1] == "") {
            localurl[1] = "shops"
        }
        $rootScope.active = localurl[1]
    };
    $rootScope.urlFn();
    $rootScope.goto = function (url) {
        $location.path("/" + url);
        $rootScope.urlFn()
    };
    $rootScope.logout = function () {
        logoutre = ajaxSendFn({}, constUrlDict["logout"], "POST");
        $.cookie("shopname", null, {path: "/"});
        $.cookie("token", null, {path: "/"});
        if (logoutre.code == 200) {
            location.href = indexUrl
        }
    }
});
app.directive("dyName", [function () {
    return {
        require: "ngModel", link: function (scope, elm, iAttrs, ngModelCtr) {
            ngModelCtr.$name = scope.$eval(iAttrs.dyName);
            var formController = elm.controller("form") || {$addControl: angular.noop};
            formController.$addControl(ngModelCtr);
            scope.$on("$destroy", function () {
                formController.$removeControl(ngModelCtr)
            })
        }
    }
}]);
app.filter("ltdate", function () {
    return function (d) {
        if (!d)return;
        return new Date(Date.parse(d.replace(/-/g, "/")))
    }
});
app.filter("ltnumber", function () {
    return function (d) {
        return parseInt(d)
    }
});
app.filter("splitcode", function () {
    return function (str, length, separator) {
        var arr = [];
        var len = length || 4;
        for (var i = 0; i < str.length; i = i + len) {
            var sstr = str.substr(i, len);
            arr.push(sstr)
        }
        return arr.join(separator || "-")
    }
});
app.filter("substr", function () {
    return function (str, len) {
        if (str && str.length > len) {
            return str.substr(0, len) + "..."
        }
        return str
    }
});
app.factory("tyAjaxFactory", function ($http) {
    var sevice = {};
    sevice.get = function (n, a, b, c) {
        var result;
        $http.get(basicUrl + b + "?" + sortUrl()).success(function (result) {
            deferred.resolve(result)
        }).success().then(function (date) {
            result = date.data;
            $scope.cache = {n: result}
        })
    };
    return sevice
});
app.factory("tyFnFactory", function ($http, tyAjaxFactory) {
    var sevice = {};
    sevice.shop = function (a) {
        return tyAjaxFactory.get(a, {}, "/shops")
    };
    return sevice
});
app.directive("backButton", function () {
    return {
        restrict: "A", link: function (scope, element, attrs) {
            element.bind("click", goBack);
            function goBack() {
                history.back();
                scope.$apply()
            }
        }
    }
});
app.directive("countDown", function ($interval) {
    return {
        scope: {repeats: "="}, restrict: "A", link: function (scope, element, attrs) {
            element.bind("click", countdown);
            function countdown() {
                var numdown = scope.repeats;
                var oldval = element.val();
                var timer = $interval(function () {
                    element.attr("disabled", true);
                    element.val(numdown-- + "秒后再试")
                }, 1e3, scope.repeats);
                timer.then(function () {
                    element.val(oldval);
                    element.attr("disabled", false)
                }, function () {
                    element.val("error...")
                });
                scope.$on("$destroy", function (event) {
                    $interval.cancel(timer)
                })
            }
        }
    }
});
app.directive("inPut", function () {
    return {
        restrict: "EA", scope: {age: "@dateType"}, link: function (scope, element, attrs) {
        }
    }
});
app.factory("SearchSettingService", ["$http", "$q", function ($http, $q) {
    return {
        setting: function () {
            var deferred = $q.defer();
            $http.get(basicUrl + "/shops?" + sortUrl()).success(function (result) {
                deferred.resolve(result)
            }).error(function (result) {
                deferred.reject("network error")
            });
            return deferred.promise
        }
    }
}]);
